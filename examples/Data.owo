module Data where

open import OwO.Equality

-- | A simple sum type.
data Bool : Type where
  false : Bool
  true : Bool

-- | Generalized algebraic data type (GADT).
data Nat : Type where
  zero : Nat
  succ : Nat -> Nat

-- | Generalized algebraic codata type (GACT).  Note that the pred is a partial
--   function.
codata CoNat : Type where
  iszero : Bool
  pred : iszero == false -> CoNat

n0 : Nat
n0 = zero

n1 : Nat
n1 = succ zero

n2 : Nat
n2 = succ (succ zero)

(+) : Nat -> Nat -> Nat
zero     + n = n
(succ m) + n = succ (m + n)

co0 : CoNat
iszero co0 = true
pred   co0 () -- an absurd pattern

co1 : CoNat
iszero co1 = false
pred   co1 = co0

co2 : CoNat
iszero co2 = false
pred   co2 = co1
